{"id":"speedMetrics","description":"This is a sample metric, used to text some sample metrics on a text file","metrics":[{"name":"simpleMetric","code":"var movementsInSession =  userSession.movement.filter(movement.col('steps').gt(0));\nreturn movementsInSession.count();","language":"javascript","output":{"schema":"{\"type\": \"integer\"}"}},{"name":"stepsStats","code":"var movStats =  withSteps.describe('steps');\nreturn movStats;","language":"javascript","output":{"schema":"{\"type\": \"integer\"}"}},{"name":"simpleMetricScopes","code":"return withSteps.count();","language":"javascript","output":{"schema":"{\"type\": \"integer\"}"}},{"name":"stats","code":"var movStats =  withSteps.describe(); movStats.show(); var statsNames = ['mean', 'min', 'max', 'stddev', 'count'];\nvar collected = movStats.collect();\nvar statsObj = MetricsUtils.getStats(collected, statsNames);\nreturn statsObj;","language":"javascript","output":{"schema":"{\"type\" : \"object\",\"properties\": {\"mean\": {\"type\": \"number\"}, \"min\": {\"type\": \"number\"},\"max\": {\"type\": \"number\"},\"stddev\": {\"type\": \"number\"}, \"count\": {\"type\": \"number\"}, \"fail\": {\"type\": \"number\"}} }"}},{"name":"distancesMetric","code":"function SpeedData(speed, timeLastTime, distance, lastLocation, count, bbox, lastTimeStr) \n{    \n    this.speed = speed;    \n    this.lastTime = timeLastTime;\n    this.distance = distance;\n    this.lastLocation = lastLocation;\n    this.count = count;\n    this.bbox = bbox;\n    this.lastTimeStr = lastTimeStr;\n    \n}\n    \nif (coreutils.debugMode){\n    print(\"debugmode is enabled\");\n}    \nelse {\n  print(\"debugmode is disabled\");    \n}   \n\nvar distances = userSessionLocations.aggregate(\nnew SpeedData(0,  null, 0, null, 0),\nfunction (init, row){\n    var latlon = row.latlon;/*MetricsUtils.getAsLatLon(row, latlon.fieldIndex('location'));*/\n    if (coreutils.debugMode) {\n        print(JSON.stringify(latlon));\n    }\n    var time =  row.time;/*MetricsUtils.getTimeDefault(row);*/\n    var lastLoc = init.lastLocation;\n    var lastTimeStr = row.iso_time;    \n    if (lastLoc == null){\n        if (coreutils.debugMode){\n            print ('lastloc is null:' /*+ JSON.stringify(lastLoc)*/);\n        }        init.distance = 0;        init.speed = 0;    \n        \n    } else {\n        var distance = GeoUtils.getDistanceLatLonKm(lastLoc, latlon);\n        init.distance += distance;\n        var diffTime =  Math.abs(time - init.lastTime);\n        if (coreutils.debugMode) {\n            print('times: init->'+ init.lastTimeStr + ' row->' + lastTimeStr);\n            print('time diff: '+ diffTime + ' ms' + ' ' + MetricsUtils.msToSeconds(diffTime)+ 'secs');\n            print('distance: ' + distance + ' km');\n            print('acc distance: '+ init.distance + ' km');\n        }        \n        var newspeed = distance*1000/(diffTime/1000);\n        var speedKMH = MetricsUtils.speedMstoKmH(newspeed);\n        if (coreutils.debugMode) {\n            print('speed: '+ newspeed+ ' m/s');\n            print('speed: '+ speedKMH+ ' km/h');\n            }        \n            var newCount = 1;\n            init.speed = ((init.speed * init.count) +  newspeed)/ init.count + newCount;\n            if (init.bbox == null){\n                var pt = GeoUtils.createPoint(latlon.lat, latlon.lon);\n                var pt1 = GeoUtils.createPoint(lastLoc.lat, lastLoc.lon);\n                var bbox = turf.bbox(turf.featureCollection([pt, pt1]));\n                if (coreutils.debugMode){\n                    print ('calculated bbox:' + JSON.stringify(bbox));\n                    }            \n                    init.bbox = GeoUtils.bboxToCollection(bbox);\n                    }        \n                    else {            \n                        var bboxPolygon = init.bbox;\n                        var pt = GeoUtils.createPoint(latlon.lat, latlon.lon);\n                        init.bbox = GeoUtils.addToBbox(bboxPolygon, pt);\n                    }\n                }    \n                init.lastLocation = latlon;\n                init.lastTime = time;\n                init.lastTimeStr = lastTimeStr;\n                init.count += 1;\n                if (coreutils.debugMode){\n                    print('return:' + JSON.stringify(init));\n                }    \n                return init;\n    \n}, \nfunction(init1,   init2) {\n                    var result = {};\n                    if ( coreutils.debugMode) {\n                        print ('reducing...') ;\n                        if (init1 != null) {\n                            print('init1: '+ JSON.stringify(init1));\n                            \n                        }\n                        if (init2 != null) {\n                            print('init2: '+JSON.stringify(init2));}\n                            if (init1 == null || init2 == null) print('nulls found init1:' + init1 + ' init2:'+ init2);\n                            }    \n                            if (init1!= null && init2!= null) {\n                                if (coreutils.debugMode) {\n                                    print('calculating....');\n                                    }        \n                                    result.speed = ((init1.speed * init1.count) +  (init2.speed * init2.count))/ (init1.count + init2.count);\n                                    result.lastTime = init1.lastTime;\n                                    result.distance = init1.distance + init2.distance;\n                                    result.lastLocation = init1.lastLocation;\n                                    result.count = init1.count + init2.count;\n                                    \n                                    if (init1.bbox!=null && init2.bbox!= null){\n                                        if (coreutils.debugMode) {\n                                            print('bbox1:' + JSON.stringify(init1.bbox));\n                                            print('bbox2:' + JSON.stringify(init2.bbox));\n                                            }            \n                                            var union = GeoUtils.collectionUnion(init1.bbox, init2.bbox);\n                                            if (coreutils.debugMode) {\n                                                print('union:' + JSON.stringify(union));\n                                                }            \n                                                result.bbox = GeoUtils.bboxToCollection(turf.bbox(union));\n                                                }        \n                                            else if (init1.bbox!=null && init2.bbox==null) {\n                                                    if (coreutils.debugMode) {\n                                                        print('bbox1:' + JSON.stringify(init1.bbox));\n                                                    }            \n                                                        result.bbox = init1.bbox;\n                                                }        \n                                            else if (init1.bbox == null && init2.bbox!=null) { \n                                                    if ( coreutils.debugMode){\n                                                        print('bbox2:' + JSON.stringify(init2.bbox)); \n                                                    }            \n                                                    result.bbox = init2.bbox;\n                                                    }        \n                                                    else {\n                                                        if (coreutils.debugMode){\n                                                            print('setting a bbox to null as nono of them has value');\n                                                        }\n                                                        result.bbox = null;\n                                                    }\n                                                }    \n                                                return result;\n    \n}); \n\nprint(\"fixing json\");                                                                        \ndistances.bbox = JSON.stringify(distances.bbox);\nreturn distances;\n","language":"javascript","output":{"schema":"{  \"type\": \"object\",  \"properties\": {  \"lastTime\": {\"type\": [\"string\", \"null\"]},  \"distance\": {\"type\": [\"number\",\"null\"] },  \"bbox\": {\"type\": [\"string\", \"null\"]},  \"lastLocation\" : {\"type\": [\"string\", \"null\"]},  \"count\" : {\"type\": [\"integer\", \"null\"]},  \"speed\" : {\"type\": [\"number\", \"null\"]}}}"}},{"name":"distancesMetricGeoStats","code":"return MetricsUtils.geoStats(userSession.movement);","language":"javascript","output":{"schema":""}}],"scopes":[{"name":"withSteps","code":"userSession.movement.filter(movement.col('steps').gt(0));","language":"javascript"},{"name":"locations","code":"userSession.movement.toRDD().map(function (row){ var latlon = MetricsUtils.getAsLatLon(row,  row.fieldIndex('location'));    return latlon;  });","language":"javascript"},{"name":"userSessionLocations","code":"userSession.movement.toRDD().map(function (row){ \n    var latlon = MetricsUtils.getAsLatLon(row,  row.fieldIndex('location'));\n    var time =  MetricsUtils.getTimeDefault(row);\n    var timeStr = MetricsUtils.getTimeStr(row);    \n    var result = {'latlon': latlon, \n    'time': time, \n    'iso_time': timeStr};\n    return result;})","language":"javascript"}],"variables":[{"name":"movement","description":"Variable holding the length of the text","dimensions":[{"name":"steps","type":"integer","description":"this value holds the actual length of the text"},{"type":"location"}]}],"actions":[{"id":"sendNotification","label":"Notify if threshold passed ","description":"The notification will be sent if the metric goes beyond 30%","filter":{"code":"return 1 == 1;","language":"javascript"},"target":"current_user","type":"push_notification"}]}